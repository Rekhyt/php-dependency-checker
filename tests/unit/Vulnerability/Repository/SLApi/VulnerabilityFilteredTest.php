<?php
/**
 * Copyright (c) 2017 Timo Ebel
 *
 * This work is licensed under the terms of the MIT license.
 * For a copy, see <https://opensource.org/licenses/MIT> or the LICENSE file included in this project.
 */

namespace Rekhyt\PhpDependencyChecker\Test\Unit\Vulnerability\Repository\SLApi;

use Rekhyt\PhpDependencyChecker\Vulnerability\Entity\Advisory;
use Rekhyt\PhpDependencyChecker\Vulnerability\Entity\Vulnerability as VulnerabilityEntity;
use Rekhyt\PhpDependencyChecker\Vulnerability\Filter\VulnerabilityListFilter;
use Rekhyt\PhpDependencyChecker\Vulnerability\Repository\Provider\Vulnerability;
use Rekhyt\PhpDependencyChecker\Vulnerability\Repository\SLApi\VulnerabilityFiltered;
use Rekhyt\PhpDependencyChecker\Vulnerability\ValueObject\AdvisoryTitle;
use Rekhyt\PhpDependencyChecker\Vulnerability\ValueObject\ComposerLockFileContents;
use Rekhyt\PhpDependencyChecker\Vulnerability\ValueObject\CVE;
use Rekhyt\PhpDependencyChecker\Vulnerability\ValueObject\PackageLink;
use Rekhyt\PhpDependencyChecker\Vulnerability\ValueObject\PackageName;
use Rekhyt\PhpDependencyChecker\Vulnerability\ValueObject\PackageVersion;

class VulnerabilityFilteredTest extends \PHPUnit_Framework_TestCase
{
    /** @var VulnerabilityFiltered */
    private $subjectUnderTest;

    /** @var Vulnerability|\PHPUnit_Framework_MockObject_MockObject */
    private $vulnerabilityProviderMock;

    /** @var VulnerabilityListFilter|\PHPUnit_Framework_MockObject_MockObject */
    private $vulnerabilityListFilterMock;

    public function setUp()
    {
        $this->vulnerabilityProviderMock =
            $this
                ->getMockBuilder(Vulnerability::class)
                ->getMockForAbstractClass();

        $this->vulnerabilityListFilterMock =
            $this
                ->getMockBuilder(VulnerabilityListFilter::class)
                ->getMockForAbstractClass();

        $this->subjectUnderTest = new VulnerabilityFiltered(
            $this->vulnerabilityProviderMock,
            $this->vulnerabilityListFilterMock
        );
    }

    public function testFilterIsCalledAndFilterResultIsUsed()
    {
        $vulnerabilities = [
            new VulnerabilityEntity(
                new PackageName('some'),
                new PackageVersion('version'),
                [
                    new Advisory(new AdvisoryTitle('flaw'), new PackageLink('project-url'), new CVE('CVE-123')),
                    new Advisory(new AdvisoryTitle('vuln'), new PackageLink('project-url'), new CVE('CVE-321')),
                ]
            ),
        ];

        $filteredVulnerabilities = [];

        $this->vulnerabilityProviderMock
            ->expects($this->once())
            ->method('getAllByComposerLockFileContents')
            ->willReturn($vulnerabilities);

        $this->vulnerabilityListFilterMock
            ->expects($this->once())
            ->method('filter')
            ->with($vulnerabilities)
            ->willReturn($filteredVulnerabilities);

        $this->assertEquals(
            $filteredVulnerabilities,
            $this->subjectUnderTest->getAllByComposerLockFileContents(
                new ComposerLockFileContents('some content')
            )
        );
    }
}
